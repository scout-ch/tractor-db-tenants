on:
  pull_request:

name: Check Pull Request

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: tofu
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Common Setup
        uses: ./.github/actions/common-setup
        with:
          download_bw: 'false'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: OpenTofu Format
        id: fmt
        run: tofu fmt -check -recursive -diff

      - name: Annotate PR and Run
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        if: github.event_name == 'pull_request' && (success() || failure())
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

            // 4. Write to step summary
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, output);
  plan:
    name: "Prepare Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tofu
    permissions:
      contents: read
      pull-requests: write
    env:
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      BW_CLIENTID: ${{ secrets.BW_CLIENTID }}
      BW_CLIENTSECRET: ${{ secrets.BW_CLIENTSECRET }}
      BW_PASSWORD: ${{ secrets.BW_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Plan
        id: plan
        uses: ./.github/actions/common-plan
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          lock: 'false'

      - name: Annotate PR and Run
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
        if: github.event_name == 'pull_request' && (success() || failure())
        env:
          PLAN: ${{ steps.plan.outputs.plan }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Initialization')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.plan.outputs.init_outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ steps.plan.outputs.validate_outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.validate }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outputs.plan_outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`tofu\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

            // 4. Write to step summary
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, output);
